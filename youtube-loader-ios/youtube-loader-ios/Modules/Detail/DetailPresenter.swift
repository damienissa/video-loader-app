//
//  DetailPresenter.swift
//  youtube-loader-ios
//
//  Created by Dima Virych on 26.01.2020.
//  Copyright (c) 2020 Virych. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
#warning("UIKit Must be removed after moving share functional")
import UIKit

final class DetailPresenter {

    // MARK: - Private properties -

    private unowned let view: DetailViewInterface
    private let interactor: DetailInteractorInterface
    private let wireframe: DetailWireframeInterface
    
    var video: UIVideoElement!
    
    var currentExt: String!
    

    // MARK: - Lifecycle -

    init(view: DetailViewInterface, interactor: DetailInteractorInterface, wireframe: DetailWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        
        interactor.output = { [weak self] (item, error) in
            if let dest = item?.destinationURL {
                self?.process(local: dest)
            }
        }
        
        interactor.progress = { [weak self] progress in
            self?.view.fill(Float(progress) / 100)
        }
    }
}

// MARK: - Extensions -

extension DetailPresenter: DetailPresenterInterface {
    
    var imageURL: URL? {
        
        URL(string: video.thumbnail)
    }
    
    var numberOfRows: Int {
    
        video.resources.count
    }
    
    func title(for row: Int) -> String {
        
        video.resources[row].title
    }
    
    func download(at row: Int) {
        
        let resource = video.resources[row]
        currentExt = resource.extension
        
        if let destination = destinationURL(resource) {
            
            interactor.set(dest: destination.path, for: resource)
            interactor.download(resource)
        }
    }
    
    func destinationURL(_ resource: UIVideoElement.Resource) -> URL? {
        
        guard let documentsDirectoryURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            return nil
        }
        
        let destinationURL = documentsDirectoryURL.appendingPathComponent((resource.localID + resource.title).addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? resource.localID).appendingPathExtension(currentExt)
        
        return destinationURL
    }
    
    func process(local url: URL) {
        
        DispatchQueue.main.async { [weak self] in
            self?.view.finish()
            let activityViewController = UIActivityViewController(activityItems: [url, "Check this out!"], applicationActivities: nil)
            self?.wireframe.viewController.present(activityViewController, animated: true)
        }
    }
}
